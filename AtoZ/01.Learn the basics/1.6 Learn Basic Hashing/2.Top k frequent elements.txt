Q: https://practice.geeksforgeeks.org/problems/top-k-frequent-elements-in-array/1

Input:
N = 6
nums = {1,1,1,2,2,3}
k = 2
Output: {1, 2}

class Solution {
    public int[] topK(int[] nums, int k) {
        int[] ans = new int[k];
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer> > queue
            = new PriorityQueue<>(
                (a, b) -> a.getValue().equals(b.getValue())
                           ? Integer.compare(b.getKey(), a.getKey())
                           : Integer.compare(b.getValue(), a.getValue()));
 
        for (Map.Entry<Integer, Integer> entry : map.entrySet())
            queue.offer(entry);
            
        for (int i = 0; i < k; i++)
            ans[i] = queue.poll().getKey();
        
        return ans;
    }
}

class Solution {
    public int[] topK(int[] nums, int k) {
        int[] ans = new int[k];
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
                
        List<Map.Entry<Integer, Integer> > list
            = new ArrayList<Map.Entry<Integer, Integer> >(
                map.entrySet());
 
        Collections.sort(list,
            new Comparator<Map.Entry<Integer, Integer> >() {
                public int compare(
                    Map.Entry<Integer, Integer> o1,
                    Map.Entry<Integer, Integer> o2) {
                    if (o1.getValue().equals(o2.getValue()))
                        return o2.getKey() - o1.getKey();
                    else
                        return o2.getValue() - o1.getValue();
                }
            });

        for (int i = 0; i < k; i++)
            ans[i] = list.get(i).getKey();
        
        return ans;
    }
}